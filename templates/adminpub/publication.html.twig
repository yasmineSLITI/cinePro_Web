{% extends 'baseBackOffice.html.twig' %}
{% block title %}
	Publications
{% endblock %}

{% block backContainer %}


<div class="container text-center">
<div style="position: relative; float: right;">
    <a class="btn btn-app" href = "{{ path ('pubpdf')}}">
        <i class="fas fa-save"></i> enregistrer pdf
        </a></div>

        
  <h1>Liste des Publications</h1>
  <br>
<input type="text" id="search" class="form-control form-control-no-border mr-sm-2" placeholder="chercher...">
      <br>
      
  <table class="table" id="tableac">
      <thead>
      <tr>
              <th onclick="sortTable(0)">IdPresse</th>
              <th onclick="sortTable(1)">IdPub</th>
              <th onclick="sortTable(2)">Titre</th>
              <th onclick="sortTable(3)">Description</th>
              
              <th onclick="sortTable(4)">Archive</th>
  
      </tr>
      </thead>
<tbody>

 {% for pub in publications %} 
                <tr>
                    <td>{{ pub.idPresse }}</td>
                    <td>{{ pub.idpub }}</td>
                    <td>{{ pub.titre }}</td>
                    
                    <td>{{ pub.txtpub }}</td>
                    <td>{{ pub.archive }}</td>

                    <td>
                        <a class="btn btn-danger" href="{{ path('detail',{'id':pub.idpub}) }}">Plus de details</a>
                        <a class="btn btn-danger" href="{{ path('supprimerPubAdmin',{'id':pub.idpub}) }}">Supprimer</a>

                    </td>
                </tr>
            {% else %}
                <tr>
                    <td colspan="7">no records found</td>
                </tr>
 {% endfor %}
 

</tbody>

</table>



</div>
<script>
    $(document).ready(function(){
        $('#search').keyup(function(){
            search_table($(this).val());
        });
        function search_table(value){
            $('#tableac tbody tr').each(function(){
                var found = 'false';
                $(this).each(function(){
                    if($(this).text().toLowerCase().indexOf(value.toLowerCase()) >= 0)
                    {
                        found = 'true';
                    }
                });
                if(found == 'true')
                {
                    $(this).show();
                }
                else
                {
                    $(this).hide();
                }
            });
        }
    });
</script>
<script>
    function sortTable(n) {
        var table, rows, switching, i, x, y, shouldSwitch, dir, switchcount = 0;
        table = document.getElementById("tableac");
        switching = true;
        // Set the sorting direction to ascending:
        dir = "asc";
        /* Make a loop that will continue until
        no switching has been done: */
        while (switching) {
            // Start by saying: no switching is done:
            switching = false;
            rows = table.rows;
            /* Loop through all table rows (except the
            first, which contains table headers): */
            for (i = 1; i < (rows.length - 1); i++) {
                // Start by saying there should be no switching:
                shouldSwitch = false;
                /* Get the two elements you want to compare,
                one from current row and one from the next: */
                x = rows[i].getElementsByTagName("TD")[n];
                y = rows[i + 1].getElementsByTagName("TD")[n];
                /* Check if the two rows should switch place,
                based on the direction, asc or desc: */
                if (dir == "asc") {
                    if (x.innerHTML.toLowerCase() > y.innerHTML.toLowerCase()) {
                        // If so, mark as a switch and break the loop:
                        shouldSwitch = true;
                        break;
                    }
                } else if (dir == "desc") {
                    if (x.innerHTML.toLowerCase() < y.innerHTML.toLowerCase()) {
                        // If so, mark as a switch and break the loop:
                        shouldSwitch = true;
                        break;
                    }
                }
            }
            if (shouldSwitch) {
                /* If a switch has been marked, make the switch
                and mark that a switch has been done: */
                rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
                switching = true;
                // Each time a switch is done, increase this count by 1:
                switchcount ++;
            } else {
                /* If no switching has been done AND the direction is "asc",
                set the direction to "desc" and run the while loop again. */
                if (switchcount == 0 && dir == "asc") {
                    dir = "desc";
                    switching = true;
                }
            }
        }
    }
</script>
<script src="{{ asset('jquery.min.js') }}"></script>



{{ knp_pagination_render(publications) }}

{% endblock %}